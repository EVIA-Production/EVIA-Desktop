
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';

export const useRecording = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [suggestion, setSuggestion] = useState('');
  const { toast } = useToast();
  
  const addDebugLog = (message: string, setDebugLog: React.Dispatch<React.SetStateAction<string[]>>) => {
    setDebugLog(prev => [...prev, `[${new Date().toISOString()}] ${message}`]);
    console.log(`DEBUG: ${message}`);
  };

  const handleStartRecording = async (setDebugLog: React.Dispatch<React.SetStateAction<string[]>>) => {
    console.log('handleStartRecording called');
    
    try {
      // Request both audio and screen capture permissions
      const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const displayStream = await navigator.mediaDevices.getDisplayMedia({ 
        video: { 
          displaySurface: "monitor" 
        },
        audio: true 
      });
      
      // If we get here, permissions were granted
      setIsRecording(true);
      addDebugLog('Permissions granted. Recording started.', setDebugLog);
      
      // Simulate transcription with some sample text
      setTimeout(() => {
        setTranscript('This is a sample transcript that would normally come from speech recognition.');
      }, 1000);
      
      // Clean up function to stop tracks when recording is stopped
      return () => {
        audioStream.getTracks().forEach(track => track.stop());
        displayStream.getTracks().forEach(track => track.stop());
      };
    } catch (error) {
      console.error('Error getting media permissions:', error);
      addDebugLog(`Permission error: ${error}`, setDebugLog);
      toast({
        title: "Permission Error",
        description: "Could not access microphone or screen. Please grant permissions and try again.",
        variant: "destructive"
      });
    }
  };

  const handleStopRecording = (setDebugLog: React.Dispatch<React.SetStateAction<string[]>>) => {
    console.log('handleStopRecording called');
    setIsRecording(false);
    addDebugLog('Recording stopped', setDebugLog);
    toast({
      description: "Recording stopped",
    });
  };

  const handleSuggest = (setDebugLog: React.Dispatch<React.SetStateAction<string[]>>) => {
    console.log('handleSuggest called');
    addDebugLog('Suggestion requested', setDebugLog);
    toast({
      description: "Requesting suggestion...",
    });
    
    // Simulate a suggestion response
    setTimeout(() => {
      setSuggestion('This is a sample suggestion based on your transcript. In a real application, this would be generated by an AI based on the recorded speech.');
    }, 1000);
  };

  const handleResetContext = (setDebugLog: React.Dispatch<React.SetStateAction<string[]>>) => {
    console.log('handleResetContext called');
    setTranscript('');
    setSuggestion('');
    addDebugLog('Context reset', setDebugLog);
    toast({
      description: 'Context has been reset',
    });
  };

  return {
    isRecording,
    transcript,
    suggestion,
    handleStartRecording,
    handleStopRecording,
    handleSuggest,
    handleResetContext,
    setTranscript,
    setSuggestion
  };
};
